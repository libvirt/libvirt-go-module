/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (C) 2022 Red Hat, Inc.
 *
 */

{{- /* The C comment bellow is intended for the output of this template.*/}}
/****************************************************************************
 * THIS CODE HAS BEEN GENERATED. DO NOT CHANGE IT DIRECTLY                  *
 ****************************************************************************/

#pragma once

{{- /* The Function types below are used by other Function types too, so they have to come first. */}}
{{- /* We hard code here just to simplify the logic later. */}}

{{- if eq .Name "libvirt" }}

#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef void (*virFreeCallback)(void * opaque);
#endif

#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef void (*virEventTimeoutCallback)(int timer,
                                        void * opaque);
#endif

#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef void (*virEventHandleCallback)(int watch,
                                       int fd,
                                       int events,
                                       void * opaque);
#endif
{{- end -}}

{{- with .Functypes }}
    {{- range . }}
        {{- /* Ignore hard coded functions */}}
        {{- if eq .Name "virFreeCallback" }}
        {{- else if eq .Name "virEventTimeoutCallback" }}
        {{- else if eq .Name "virEventHandleCallback" }}
        {{- else }}
            {{- $args := "void" }}
            {{- with .Args }}
                {{- $nargs := len . }}
                {{- range $i, $e := . }}
                    {{- $newArg := (printf "%s %s" $e.Type $e.Name) }}
                    {{- if eq $i 0 }}
                        {{- $args = $newArg }}
                    {{- else }}
                        {{- $args = (printf "%s,%s" $args $newArg) }}
                    {{- end }}
                {{- end }}
            {{- end }}
            {{- $functypePrefix := (printf "typedef %s (*%s)(" .Return.Type .Name) }}
            {{- $major := getVersionMajor .Version }}
            {{- $minor := getVersionMinor .Version }}
            {{- $micro := getVersionMicro .Version }}

#if !LIBVIR_CHECK_VERSION({{ $major }}, {{ $minor }}, {{ $micro }})
{{ $functypePrefix }}{{ indent $args $functypePrefix }});
#endif
        {{- end }}
    {{- end }}
{{- end }}

{{- /* vim: set syntax=gotexttmpl : */}}
